#include <Core/PropertyCore.h>
#include <Core/PropertyGUI.h>

#include_cpp <QFileDialog>

enum COLOR
{
    red (1, "red"),
    blue (2, "blue"),
    green (3, "green")
}

enum FLAGS
{
    opt1(1, "Option1"),
    opt2(2, "Option2"),
    opt3(4, "Option3")
}

enum SHADINGMODEL
{
	pbr(0, "PBR shading"),
  	bumpMapping(1, "Bump mapping")
}

enum BLENDINGMODE
{
  blendNormal(0, "Normal"),
  blendMultiply(1, "Multiply"),
  blendAdd(2, "Add"),
  blendSubtract(3, "Subtract"),
  blendDifference(4, "Difference"),
  blendDivide(5, "Divide"),
  blendScreen(6, "Screen"),
  blendOverlay(7, "Overlay"),
  blendDodge(8, "Dodge"),
  blendBurn(9, "Burn"),
  blendDarkenOnly(10, "Darken Only"),
  blendLightenOnly(11, "Lighten Only")
} 

enum INPUTIMAGE
{
  inputCurrent(0, "Current image"),
  inputHeightInput(1, "Height (Input)"),
  inputHeightOutput(2, "Height (Output)")
}


property_set FormImageProp
{
	Int GrungeRadius {
		description = "<html><head/><body><p>It scales the UVs of generated random image. Value 1 is 	neutral.</p></body></html>";
		minValue=1;
		maxValue=100;
		stepValue=0;
		value=1;
	}
	Int GrungeOverallWeight {
		description = "<html><head/><body><p>Set common blending weight factor for all textures 	blending.</p></body></html>";
		minValue=0;
		maxValue=100;
		stepValue=0;
		value=0;
	}
	Int GrungeSeed {
		description = "<html><head/><body><p>When 0 - use orginal image, otherwise generate random 	seamless image. </p></body></html>";
		minValue=0;
		maxValue=100;
		stepValue=0;
		value=0;
	}
	Int GrungeNormalWarp {
		description = "<html><head/><body><p>Warps grunge texture pixels along normals of normal 	texture.</p></body></html>";
		minValue=-100;
		maxValue=100;
		stepValue=0;
		value=0;
	}
	Int GrungeImageWeight {
		description = "<html><head/><body><p>This is blending factor for grunge image. 0 - no grunge.</p	></body></html>";
		minValue=0;
		maxValue=100;
		stepValue=0;
		value=0;
	}
	Int GrungeMainImageWeight {
		description = "<html><head/><body><p>This is blending factor for this image. 0 - no grunge.</p><	/body></html>";
		minValue=0;
		maxValue=100;
		stepValue=0;
		value=0;
	}
	Int ConversionHNDepth {
		description = "<html><head/><body><p>It changes the depth of the calculated normal map in pixels 	unit.</p><p>For example: lets assume that you have picture of wall of size 1x1 m<span style=\" 	vertical-align:super;\">2 </span> in real world with bricks pattern and your image has size 	1024x1024 pixels. Then you want to generate normals for texture which depth is 3cm = 0.03 m. So the 	depth in pixels is 0.03*1024 = 30.72 ~ 31 pixels. </p></body></html>";
		minValue=0;
		maxValue=500;
		stepValue=1;
		value=20;
	}
	Int NormalMixerAngle {
		description = "";
		minValue=-180;
		maxValue=99;
		stepValue=0;
		value=0;
	}
	Int NormalMixerScale {
		description = "";
		minValue=0;
		maxValue=100;
		stepValue=0;
		value=10;
	}
	Int NormalMixerPosX {
		description = "";
		minValue=-100;
		maxValue=100;
		stepValue=0;
		value=0;
	}
	Int NormalMixerPosY {
		description = "";
		minValue=-100;
		maxValue=100;
		stepValue=0;
		value=0;
	}
	Int NormalMixerDepth {
		description = "";
		minValue=-200;
		maxValue=200;
		stepValue=0;
		value=0;
	}
	Int SSAONoIters {
		description = "<html><head/><body><p>Radius of the mask. Large number will lead to poor 	performance. For small images (about 1024x1024) this should not be a problem, but for larger you 	should use this parameter carefully.</p></body></html>";
		minValue=1;
		maxValue=50;
		stepValue=0;
		value=4;
	}
	Int SSAODepth {
		description = "It changes the scale of the effect. ";
		minValue=1;
		maxValue=100;
		stepValue=0;
		value=1;
	}
	Int SSAOIntensity {
		description = "It changes the contrast of the image. ";
		minValue=0;
		maxValue=500;
		stepValue=0;
		value=100;
	}
	Int SSAOBias {
		description = "This again allows you to control the contrast of the image.";
		minValue=-400;
		maxValue=400;
		stepValue=0;
		value=0;
	}
	Int RoughnessDepth {
		description = "<html><head/><body><p>Changes range of the effect.</p></body></html>";
		minValue=0;
		maxValue=100;
		stepValue=0;
		value=0;
	}
	Int RoughnessTreshold {
		description = "<html><head/><body><p>Basically it sets the cutoff level of roughness. Lower 	values will lead to higher rgouhness level.</p></body></html>";
		minValue=-255;
		maxValue=255;
		stepValue=0;
		value=0;
	}
	Int RoughnessAmplifier {
		description = "<html><head/><body><p>Amplifies the effect.</p></body></html>";
		minValue=-100;
		maxValue=100;
		stepValue=0;
		value=0;
	}
	Int RoughnessColorOffset {
		description = "Offset value of color comparison test";
		minValue=-100;
		maxValue=100;
		stepValue=0;
		value=0;
	}
	Int RoughnessColorAmplifier {
		description = "Amplify effect";
		minValue=-100;
		maxValue=100;
		stepValue=0;
		value=0;
	}
	Int RoughnessColorGlobalOffset {
		description = "";
		minValue=-255;
		maxValue=255;
		stepValue=0;
		value=0;
	}
	Int NormalToHeightItersLarge {
		description = "Number of iterations done on large grid.";
		minValue=0;
		maxValue=99;
		stepValue=10;
		value=0;
	}
	Int NormalToHeightItersVerySmall {
		description = "Number of iterations done on very small grid (nearest neighbours).";
		minValue=0;
		maxValue=99;
		stepValue=10;
		value=0;
	}
	Int NormalToHeightItersSmall {
		description = "Number of iterations done on  small grid (second nearest neighbours).";
		minValue=0;
		maxValue=99;
		stepValue=10;
		value=0;
	}
	Int NormalToHeightItersVeryLarge {
		description = "Number of iterations done on very large grid.";
		minValue=0;
		maxValue=100;
		stepValue=10;
		value=4;
	}
	Int NormalToHeightItersMedium {
		description = "Number of iterations done on medium grid.";
		minValue=0;
		maxValue=99;
		stepValue=10;
		value=0;
	}
	Int NormalToHeightItersHuge {
		description = "<html><head/><body><p>Number of iterations done on huge grid.</p></body></html>";
		minValue=0;
		maxValue=99;
		stepValue=10;
		value=0;
	}
	Int GrayScaleR {
		description = "";
		minValue=0;
		maxValue=255;
		stepValue=10;
		value=0;
	}
	Int GrayScaleG {
		description = "";
		minValue=0;
		maxValue=255;
		stepValue=10;
		value=0;
	}
	Int GrayScaleB {
		description = "";
		minValue=0;
		maxValue=255;
		stepValue=10;
		value=0;
	}
	Int RemoveShadingLFBlending {
		description = "";
		minValue=0;
		maxValue=100;
		stepValue=0;
		value=0;
	}
	Int RemoveShadingLFRadius {
		description = "<html><head/><body><p>Set the mask <span style=\" font-weight:600;\">radius</span	>: larger values remove lower frequencies, lower values - higher frequencies. This tool is a 	analogical to <span style=\" font-weight:600;\">Low Frequency Even GIMP</span> plugin.</p></body></	html>";
		minValue=0;
		maxValue=100;
		stepValue=0;
		value=0;
	}
	Int RemoveShadingGaussIter {
		description = "<html><head/><body><p>In case if option <span style=\" font-weight:600;\">Remove 	shading</span> is enabled it changes the number of iterations to be performed.</p></body></html>";
		minValue=1;
		maxValue=100;
		stepValue=2;
		value=10;
	}
	Int AOCancelation {
		description = "<html><head/><body><p>Remove dark regions using calculated AO map. </p></body></	html>";
		minValue=0;
		maxValue=100;
		stepValue=0;
		value=0;
	}
	Int BlurNoPasses {
		description = "<html><head/><body><p>Basically it works like gamma correction. </p><p>Especially 	useful in case of height texture.</p></body></html>";
		minValue=0;
		maxValue=10;
		stepValue=1;
		value=0;
	}
	Int DetailDepth {
		description = "<html><head/><body><p>It changes the depth of the <span style=\" font-weight:600;	\">Small details</span> and <span style=\" font-weight:600;\">Medium details</span> effect.</p></	body></html>";
		minValue=0;
		maxValue=100;
		stepValue=10;
		value=40;
	}
	Int NormalsStep {
		description = "<html><head/><body><p>It changes the steepness of the normal image in %.</p><p>	For example 100% means that the image is not changed. 0% means that the  image is completely flat.  	</p></body></html>";
		minValue=-500;
		maxValue=500;
		stepValue=10;
		value=0;
	}
	Int ColorHue {
		description = "Change color Hue";
		minValue=0;
		maxValue=180;
		stepValue=10;
		value=0;
	}
	Int SharpenBlur {
		description = "<html><head/><body><p>Smooth or sharpen the image (it uses the gaussian 	distribution  in both cases).</p></body></html>";
		minValue=-20;
		maxValue=20;
		stepValue=10;
		value=0;
	}
	Int MediumDetails {
		description = "The same as above.";
		minValue=0;
		maxValue=100;
		stepValue=10;
		value=0;
	}
	Int SmallDetails {
		description = "<html><head/><body><p>Enhance small details. This option is connected with <span 	style=\" font-weight:600;\">Depth</span> scroll bar. </p><p>Note that if <span style=\" font-	weight:600;\">Depth</span> scroll bar is set to zero, this parameter does not affect the image.</p><	/body></html>";
		minValue=0;
		maxValue=100;
		stepValue=10;
		value=0;
	}
	Int HeightAveRadius {
		description = "";
		minValue=1;
		maxValue=100;
		stepValue=0;
		value=1;
	}
	Int HeightProcMinValue {
		description = "";
		minValue=0;
		maxValue=200;
		stepValue=0;
		value=0;
	}
	Int HeightProcMaxValue {
		description = "";
		minValue=0;
		maxValue=200;
		stepValue=0;
		value=200;
	}
	Int HeightOffsetValue {
		description = "";
		minValue=-100;
		maxValue=100;
		stepValue=0;
		value=0;
	}
	Int SpeculatW1 {
		description = "Radius of the first gaussian";
		minValue=1;
		maxValue=4000;
		stepValue=50;
		value=10;
	}
	Int SpecularW2 {
		description = "Radius of the second gaussian";
		minValue=1;
		maxValue=4000;
		stepValue=50;
		value=1000;
	}
	Int SpecularRadius {
		description = "<html><head/><body><p>Mask radius. Usually it is greater than <span style=\" font	-weight:600;\">Weight #1</span> and <span style=\" font-weight:600;\">Weight #2</span>. But here you 	can choose any value.</p></body></html>";
		minValue=1;
		maxValue=40;
		stepValue=1;
		value=10;
	}
	Int SpecularContrast {
		description = "It changes the contrast of the image.";
		minValue=0;
		maxValue=200;
		stepValue=5;
		value=105;
	}
	Int SpecularAmplifier {
		description = "It multiplies the output image by a given number.";
		minValue=-100;
		maxValue=100;
		stepValue=1;
		value=30;
	}
	Int SpecularBrightness {
		description = "";
		minValue=-100;
		maxValue=100;
		stepValue=10;
		value=0;
	}
	Int SelectiveBlurMaskRadius {
		description = "Gaussian blur radius";
		minValue=0;
		maxValue=50;
		stepValue=10;
		value=5;
	}
	Int SelectiveBlurBlending {
		description = "Strenght of the effect.  ";
		minValue=0;
		maxValue=100;
		stepValue=0;
		value=0;
	}
	Int SelectiveBlurNoIters {
		description = "Number of gaussian blur iterations";
		minValue=1;
		maxValue=10;
		stepValue=0;
		value=1;
	}
	Int SelectiveBlurDOGRadius {
		description = "Difference of Gaussians blur radius. First image is not blured.";
		minValue=0;
		maxValue=50;
		stepValue=0;
		value=5;
	}
	Int SelectiveBlurDOGContrast {
		description = "";
		minValue=-100;
		maxValue=100;
		stepValue=0;
		value=0;
	}
	Int SelectiveBlurDOGAmplifier {
		description = "";
		minValue=-100;
		maxValue=100;
		stepValue=0;
		value=-30;
	}
	Int SelectiveBlurDOGOffset {
		description = "Move the result value up/down";
		minValue=-255;
		maxValue=255;
		stepValue=0;
		value=0;
	}
	Int SelectiveBlurMinValue {
		description = "";
		minValue=0;
		maxValue=255;
		stepValue=0;
		value=0;
	}
	Int SelectiveBlurMaxValue {
		description = "";
		minValue=0;
		maxValue=255;
		stepValue=0;
		value=255;
	}
	Int SelectiveBlurDetails {
		description = "";
		minValue=1;
		maxValue=100;
		stepValue=0;
		value=1;
	}
	Int SelectiveBlurOffset {
		description = "";
		minValue=-255;
		maxValue=255;
		stepValue=0;
		value=0;
	}
	Int BaseToOthersAngleCorrection {
		description = "";
		minValue=0;
		maxValue=360;
		stepValue=0;
		value=0;
	}
	Int BaseToOthersAngleWeight {
		description = "";
		minValue=-100;
		maxValue=100;
		stepValue=0;
		value=0;
	}
}

property_set AwesomeBump
{
  // Diffuse image
  extern property_set FormImageProp DiffuseImage
  {
    description = "Diffuse Image";
    state = QtnPropertyStateCollapsed;
  }

  // Normal image
  extern property_set FormImageProp NormalImage
  {
    description = "Normal Image";
    state = QtnPropertyStateCollapsed;
  }

  // Specular image
  extern property_set FormImageProp SpecularImage
  {
    description = "Specular processing";
    state = QtnPropertyStateCollapsed;
  }

  // Occlusion image
  extern property_set FormImageProp OcclusionImage
  {
    description = "Occlusion Image";
    state = QtnPropertyStateCollapsed;
  }

  // Roughness image
  extern property_set FormImageProp RoughnessImage
  {
    description = "Roughness Image";
    state = QtnPropertyStateCollapsed;
  }

  // Metallic image
  extern property_set FormImageProp MetallicImage
  {
    description = "Metallic Image";
    state = QtnPropertyStateCollapsed;
  }

  // Materials image
  property_set MaterialsImageType MaterialsImage
  {
    description = "Materials Image";
    state = QtnPropertyStateCollapsed;
    QString Dummy
    {
    	description = "Dummy";
    }
  }

  // Grunge general settings
  property_set GrungeGeneralSettingsType GrungeGeneralSettings
  {
    description = "Grunge general settings";

    Int OverallWeight
    {
      description = "Set common blending weight factor for all textures blending.";
      value = 0;
      minValue = 0;
      maxValue = 100;
      stepValue = 1;
    }

    Int Randomize
    {
      description = "When 0 - use orginal image, otherwise generate random seamless image.";
      value = 0;
      minValue = 0;
      maxValue = 100;
      stepValue = 1;
    }

    Int Scale
    {
      description = "It scales the UVs of generated random image. Value 1 is neutral.";
      value = 1;
      minValue = 1;
      maxValue = 100;
      stepValue = 25;
    }

    Int NormalWarp
    {
      description = "Warps grunge texture pixels along normals of normal texture.";
      value = 0;
      minValue = -100;
      maxValue = 100;
      stepValue = 1;
    }

    QString Predefined 
    {
      description = "Load predefined grunge map from list. Note that predefined grunge textures are located in Core/2D/grungefolder. You can paste there your own images in oder to make your own list of grunge images.";
      delegate List
      {
        items = QStringList() << "one" << "two" << "three" << "four";
      }
    }

    Bool RandomTranslations  
    {
      description = "Random translations.";
      value = false;
    }

    Bool ReplotAllTexturesWhenChanges 
    {
      description = "Replot all textures when changes.";
      value = false;
    }
  } // end group

  
  // Grunge pattern
  property_set GrungePatternType GrungePattern
  {
    description = "Grunge pattern";

    Enum BlendingMode
    {
      description = "Blending modes are same as in GIMP program.";
      enumInfo = &BLENDINGMODE::info();
      value = BLENDINGMODE::blendNormal;
    }

    Int GrungeWeight
    {
      description = "This is blending factor for grunge image. 0 - no grunge.";
      value = 0;
      minValue = 0;
      maxValue = 100;
      stepValue = 1;
    }

    Int ImageWeight
    {
      description = "This is blending factor for this image. 0 - no grunge.";
      value = 0;
      minValue = 0;
      maxValue = 100;
      stepValue = 1;
    }
  } // GrungePattern

  // UV&Tiling settings
  property_set UVSettingsType UVSettings
  {
    description = "UV/Tiling Settings";
	Int SeamlessContrastPower {
		description = "<html><head/><body><p>Another parameter which allows you to control blending weights  between two colors.</p></body></html>";
		minValue=0;
		maxValue=99;
		stepValue=10;
		value=0;
	}
	Int SeamlessContrastStrenght {
		description = "<html><head/><body><p>It corrects the blending equation according to contrast between two mixed colors. When slider is set to <span style=\" font-weight:600;\">zero</span> standard linear interpolation is applied. This tool works best with <span style=\" font-weight:600;\">simple tilling</span> algorithm.</p><p><br/></p></body></html>";
		minValue=0;
		maxValue=100;
		stepValue=10;
		value=0;
	}
	Int MakeSeamlessRadius {
		description = "";
		minValue=0;
		maxValue=100;
		stepValue=10;
		value=50;
	}
	Int RandomPatchesInnerRadius {
		description = "";
		minValue=0;
		maxValue=100;
		stepValue=10;
		value=20;
	}
	Int RandomPatchesRotate {
		description = "";
		minValue=-180;
		maxValue=180;
		stepValue=10;
		value=0;
	}
	Int RandomPatchesOuterRadius {
		description = "";
		minValue=0;
		maxValue=100;
		stepValue=10;
		value=40;
	}
  }

  // Input image
  Enum InputImage 
  {
      description = "Choose the input image for further processing. Warning: when current image is selected and UV transformation are applied then output normal image may not by transformed properly.";
      enumInfo = &INPUTIMAGE::info();
      value = INPUTIMAGE::inputCurrent;
  }

  Float DepthInPixels
  {
    description = "It changes the depth of the calculated normal map in pixels unit. For example: lets assume that you have picture of wall of size 1x1 m2 in real world with bricks pattern and your image has size 1024x1024 pixels. Then you want to generate normals for texture which depth is 3cm = 0.03 m. So the depth in pixels is 0.03*1024 = 30.72 ~ 31 pixels.";
    value = 20;
    minValue = 0;
    maxValue = 1000;
    stepValue = 1;
  }

  //Action RecalculateFromNormals {
  //  description = "";
  //}
}
